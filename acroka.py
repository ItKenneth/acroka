import os
import random
import string
import subprocess
import asyncio
import psutil
import platform
from telethon import TelegramClient, events
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = '24755102'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API_ID
API_HASH = 'fb23dc1caeb3349abb5e0ebcdafc0bcf'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API_HASH
TOKEN_FILE = 'bottoken.txt'  
INFO_FILE = 'userinfo.txt'  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≤–∞—à–µ–≥–æ userbot
client = TelegramClient('userbot', API_ID, API_HASH)

class DeferredMessage:
    def __init__(self, client):
        self.client = client
        self.interval = 3600  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, 1 —á–∞—Å
        self.message_count = 10  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, 10 —Å–æ–æ–±—â–µ–Ω–∏–π

    async def –æ—Ç–ª–æ–∂–∫–∞(self, event):
        """–ò—Å–ø–æ–ª—å–∑—É–π .–æ—Ç–ª–æ–∂–∫–∞ <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <–ø–µ—Ä–∏–æ–¥> <—Ç–µ–∫—Å—Ç> –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        args = event.message.message.split(' ', 3)  # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏

        if len(args) < 4:
            await event.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–µ—Ä–∏–æ–¥ (–≤ –º–∏–Ω—É—Ç–∞—Ö) –∏ —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <–ø–µ—Ä–∏–æ–¥> <—Ç–µ–∫—Å—Ç>")
            return
        
        try:
            self.message_count = int(args[1].strip())
            self.interval = int(args[2].strip()) * 60  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã
        except ValueError:
            await event.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –ø–µ—Ä–∏–æ–¥–∞.")
            return
        
        text = args[3].strip()
        
        if not text:
            await event.reply("‚úã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return

        await event.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã!")

        chat_id = event.chat_id
        
        for i in range(self.message_count):
            send_time = datetime.now() + timedelta(seconds=self.interval * i)
            await self.client.send_message(chat_id, text, schedule=send_time)

        final_message = (f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {self.message_count} —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ {self.interval // 60} –º–∏–Ω—É—Ç(—ã).\n"
                         f"üõ†Ô∏è Made with love")

        await self.client.send_message(chat_id, final_message)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
deferred_message = DeferredMessage(client)

@client.on(events.NewMessage(pattern=r'\.–æ—Ç–ª–æ–∂–∫–∞'))
async def handler(event):
    await deferred_message.–æ—Ç–ª–æ–∂–∫–∞(event)
    

class ChatCounter:
    """–°—á–∏—Ç—ã–≤–∞–µ—Ç –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —á–∞—Ç—ã –≤ Telegram: –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã, –≥—Ä—É–ø–ø—ã, –∫–∞–Ω–∞–ª—ã –∏ –±–æ—Ç—ã"""

    strings = {
        "personal_chats": "üë§ –õ–∏—á–Ω—ã–µ —á–∞—Ç—ã: {}",
        "groups": "üë• –ì—Ä—É–ø–ø—ã: {}",
        "channels": "üì° –ö–∞–Ω–∞–ª—ã: {}",
        "bots": "ü§ñ –ë–æ—Ç—ã: {}",
        "total": "üìä –í—Å–µ–≥–æ —á–∞—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {}",
        "estimate_time": "‚è≥ –í—Ä–µ–º—è –ø–æ–¥—Å—á–µ—Ç–∞: {:.2f} —Å–µ–∫—É–Ω–¥",
        "calculating": "üîÑ –ò–¥–µ—Ç —Ä–∞—Å—á–µ—Ç...",
        "no_chats": "‚ùå –ß–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
        "error": "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {}"
    }

    def __init__(self, client):
        self.client = client

    async def count_chats(self, event):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤."""
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
        total_chats = personal_chats = groups = channels = bots = 0

        start_time = time.time()
        await event.reply(self.strings["calculating"])

        try:
            async for dialog in self.client.iter_dialogs():
                total_chats += 1
                if dialog.is_user:
                    personal_chats += 1
                elif dialog.is_group:
                    groups += 1
                elif dialog.is_channel:
                    channels += 1
                elif getattr(dialog.entity, 'bot', False):
                    bots += 1

            if total_chats == 0:
                await event.reply(self.strings["no_chats"])
                return

            elapsed_time = time.time() - start_time

            final_response = (
                "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥—Å—á–µ—Ç–∞:\n\n"
                f"{self.strings['personal_chats'].format(personal_chats)}\n"
                f"{self.strings['groups'].format(groups)}\n"
                f"{self.strings['channels'].format(channels)}\n"
                f"{self.strings['bots'].format(bots)}\n"
                f"{self.strings['total'].format(total_chats)}\n"
                f"{self.strings['estimate_time'].format(elapsed_time)}"
            )

            await event.reply(final_response)

        except FloodWaitError as e:
            await event.reply(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {str(e)} —Å–µ–∫—É–Ω–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        except Exception as e:
            await event.reply(self.strings["error"].format(str(e)))

    @classmethod
    def register(cls, client):
        """–ú–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è"""
        
        chat_counter = cls(client)

        @client.on(events.NewMessage(pattern=r'\.countchats', incoming=True))
        async def handler(event):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .countchats"""
            await chat_counter.count_chats(event)
    

def get_system_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ."""
    system_info = {}

    if platform.system() == "Windows":
        try:
            memory = str(subprocess.check_output(["wmic", "os", "get", "FreePhysicalMemory"])).strip()
            system_info["memory"] = f"–°–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å: {memory} KB"
        except Exception:
            system_info["memory"] = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏."

        try:
            system_info["cpu_load"] = f"–ù–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {psutil.cpu_percent(interval=1)}%"
        except Exception:
            system_info["cpu_load"] = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞."

        try:
            system_info["disk_usage"] = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: {}%".format(psutil.disk_usage('C:/').percent)
        except Exception:
            system_info["disk_usage"] = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∏—Å–∫–∞."

    elif platform.system() == "Linux":
        try:
            system_info["memory"] = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {}/{}".format(psutil.virtual_memory().used,
                                                                 psutil.virtual_memory().total)
        except Exception:
            system_info["memory"] = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏."

        try:
            system_info["cpu_load"] = "–ù–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {}".format(psutil.cpu_percent(interval=1)) + "%"
        except Exception:
            system_info["cpu_load"] = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞."

        try:
            system_info["disk_usage"] = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: {}/{}".format(psutil.disk_usage('/').used,
                                                                           psutil.disk_usage('/').total)
        except Exception:
            system_info["disk_usage"] = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∏—Å–∫–∞."

    else:
        system_info["memory"] = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        system_info["cpu_load"] = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        system_info["disk_usage"] = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

    return system_info

def load_user_info():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Ñ–∞–π–ª–∞."""
    if os.path.exists(INFO_FILE):
        with open(INFO_FILE, 'r') as f:
            return f.read().strip()
    return None     

@client.on(events.NewMessage(pattern=r'\.info'))
async def info_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .info"""
    user_info = load_user_info() or "–ù–µ –∑–∞–¥–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è."
    system_info = get_system_info()
    
    user = await client.get_me()
    owner_name = user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    info_text = "\n".join([
        f"–í–ª–∞–¥–µ–ª–µ—Ü: {owner_name}",
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_info}",
        system_info['memory'],
        system_info['cpu_load'],
        system_info['disk_usage']
    ])
    await event.edit(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:\n{info_text}")

@client.on(events.NewMessage(pattern=r'\.setinfo (.+)'))
async def set_info_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .setinfo"""
    user_info = event.pattern_match.group(1)
    
    if user_info:
        with open(INFO_FILE, 'w') as f:
            f.write(user_info)
        await event.edit("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
                         "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É .info –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
    else:
        await event.edit("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")

@client.on(events.NewMessage(pattern=r'\.ping'))
async def ping_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .ping"""
    process = subprocess.Popen(['ping', '-c', '1', 'google.com'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    
    if process.returncode == 0:
        result = "‚úÖ –ü–∏–Ω–≥ –∫ Google: –í—Ä–µ–º—è: {}–º—Å".format(stdout.decode().split('time=')[1].split(' ')[0])
    else:
        result = "‚ùå –û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞!"

    await event.edit(result)

def generate_username():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–æ—Ç–∞, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–µ–µ—Å—è –Ω–∞ _bot."""
    random_part = ''.join(random.choices(string.ascii_letters + string.digits, k=5))
    return f'acroka_{random_part}_bot'

async def create_bot():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ BotFather –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª–µ."""
    botfather = await client.get_input_entity('BotFather')
    bot_title = 'Acroka'

    print("–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã /newbot")
    await client.send_message(botfather, '/newbot')
    await asyncio.sleep(2)

    print("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–æ—Ç–∞")
    await client.send_message(botfather, bot_title)
    await asyncio.sleep(2)

    username = generate_username()
    print("–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", username)
    await client.send_message(botfather, username)
    await asyncio.sleep(5)

    print("–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç BotFather...")
    async for message in client.iter_messages(botfather, limit=10):
        if 'Use this token to access the HTTP API:' in message.message:
            print("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç BotFather:", message.message)

            lines = message.message.split('\n')
            for i, line in enumerate(lines):
                if 'Use this token to access the HTTP API:' in line:
                    if i + 1 < len(lines):
                        token = lines[i + 1].strip()
                        print(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: {token}")
                        break
            else:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–æ–∫–µ–Ω.")
                return None, None
            break
    else:
        print("–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º –æ—Ç BotFather –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ.")
        return None, None

    user_id = token.split(':')[0]
    with open(TOKEN_FILE, 'w') as f:
        f.write(f"{username}:{user_id}:{token}")
    
    print(f"–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {TOKEN_FILE}: {username}:{user_id}:{token}")
    return username, user_id, token

async def run_bot(token):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞."""
    bot_client = TelegramClient('bot', API_ID, API_HASH)

    await bot_client.start(bot_token=token)

    @bot_client.on(events.NewMessage(pattern='/start'))
    async def start_handler(event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –Ω–µ—ë."""
        await event.reply('Hello! –ú–µ–Ω—è –∑–æ–≤—É—Ç Acroka —è userbot!\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π .help')

    await bot_client.run_until_disconnected()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
    
    try:
        await client.start()
        print("–£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å.")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", e)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not os.path.exists(TOKEN_FILE) or os.stat(TOKEN_FILE).st_size == 0:
        print("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞.")
        username, user_id, token = await create_bot()
        
        if token:
            await asyncio.sleep(5)  # –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
        else:
            print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.")
            return
    else:
        print("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞...")
        try:
            with open(TOKEN_FILE, 'r') as f:
                data = f.read().strip()
                username, user_id, token = data.split(':', 2)
        except ValueError:
            print("–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ username:user_id:token.")
            return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ—Ä—É—Ç–∏–Ω–µ
    bot_running = asyncio.create_task(run_bot(token))

    await asyncio.sleep(3)  # –î–∞–π—Ç–µ –≤—Ä–µ–º—è –±–æ—Ç—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    
    # –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /start –±–æ—Ç—É
    await client.send_message(f'@{username}', '/start')  # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –±–æ—Ç—É

    await bot_running  # –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–æ—Ç–∞

if __name__ == '__main__':
    asyncio.run(main())
